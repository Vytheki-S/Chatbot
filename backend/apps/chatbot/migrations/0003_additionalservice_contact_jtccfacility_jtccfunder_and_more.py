# Generated by Django 5.2.5 on 2025-09-22 06:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("chatbot", "0002_chatsession_chatmessage"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AdditionalService",
            fields=[
                ("service_id", models.AutoField(primary_key=True, serialize=False)),
                ("service_name", models.CharField(max_length=100)),
                ("basic_rate", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "extra_hourly_rate",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("is_mandatory", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "chatbot_additional_services",
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("email", models.EmailField(blank=True, max_length=100, null=True)),
                (
                    "available_time",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
            ],
            options={
                "db_table": "chatbot_contacts",
            },
        ),
        migrations.CreateModel(
            name="JTCCFacility",
            fields=[
                ("facility_id", models.AutoField(primary_key=True, serialize=False)),
                ("facility_name", models.CharField(max_length=255)),
                (
                    "facility_type",
                    models.CharField(
                        choices=[
                            ("Auditorium", "Auditorium"),
                            ("Conference Hall", "Conference Hall"),
                            ("Amphitheatre", "Amphitheatre"),
                            ("Library", "Library"),
                            ("Exhibition Space", "Exhibition Space"),
                            ("Open Space", "Open Space"),
                        ],
                        max_length=20,
                    ),
                ),
                ("capacity", models.IntegerField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("specifications", models.TextField(blank=True, null=True)),
                ("is_available", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "chatbot_jtcc_facilities",
            },
        ),
        migrations.CreateModel(
            name="JTCCFunder",
            fields=[
                ("funder_id", models.AutoField(primary_key=True, serialize=False)),
                ("funder_name", models.CharField(max_length=255)),
                (
                    "funder_type",
                    models.CharField(
                        choices=[
                            ("Government", "Government"),
                            ("Organization", "Organization"),
                            ("Individual", "Individual"),
                        ],
                        max_length=20,
                    ),
                ),
                ("country", models.CharField(blank=True, max_length=100, null=True)),
                ("role_description", models.TextField(blank=True, null=True)),
                (
                    "contact_info",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "chatbot_jtcc_funders",
            },
        ),
        migrations.CreateModel(
            name="JTCCHistory",
            fields=[
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("official_name", models.CharField(max_length=255)),
                ("common_name", models.CharField(default="JTCC", max_length=255)),
                ("location", models.CharField(max_length=255)),
                ("inauguration_date", models.DateField()),
                ("inaugurated_by", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("facilities", models.TextField()),
                ("renaming_date", models.DateField(blank=True, null=True)),
                (
                    "renaming_announced_by",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "renaming_occasion",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Active", "Active"),
                            ("Inactive", "Inactive"),
                            ("Under Maintenance", "Under Maintenance"),
                        ],
                        default="Active",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "chatbot_jtcc_history",
            },
        ),
        migrations.CreateModel(
            name="JTCCMilestone",
            fields=[
                ("milestone_id", models.AutoField(primary_key=True, serialize=False)),
                ("event_date", models.DateField()),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("Inauguration", "Inauguration"),
                            ("Renaming", "Renaming"),
                            ("Cultural Event", "Cultural Event"),
                            ("Maintenance", "Maintenance"),
                            ("Expansion", "Expansion"),
                            ("Award", "Award"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "conducted_by",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("attendees", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "chatbot_jtcc_milestones",
                "ordering": ["-event_date"],
            },
        ),
        migrations.CreateModel(
            name="PriceTier",
            fields=[
                ("tier_id", models.AutoField(primary_key=True, serialize=False)),
                ("duration", models.IntegerField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                "db_table": "chatbot_price_tiers",
            },
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                ("venue_id", models.AutoField(primary_key=True, serialize=False)),
                ("venue_name", models.CharField(max_length=100)),
                ("capacity", models.IntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("inactive", "Inactive")],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("image", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "chatbot_venues",
            },
        ),
        migrations.CreateModel(
            name="Applicant",
            fields=[
                ("applicant_id", models.AutoField(primary_key=True, serialize=False)),
                ("applicant_name", models.CharField(max_length=200)),
                (
                    "organization_type",
                    models.CharField(
                        choices=[
                            ("corporate_business", "Corporate Business"),
                            ("educational_institution", "Educational Institution"),
                            ("non_profit_ngo", "Non-Profit/NGO"),
                            ("government_public_sector", "Government/Public Sector"),
                            ("private_individual", "Private Individual"),
                            ("religious_organization", "Religious Organization"),
                            (
                                "entertainment_event_management",
                                "Entertainment/Event Management",
                            ),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                    ),
                ),
                ("organization", models.CharField(max_length=200)),
                ("contact_no", models.CharField(max_length=20)),
                ("email", models.EmailField(max_length=100)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applicant_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_applicants",
            },
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                ("booking_id", models.AutoField(primary_key=True, serialize=False)),
                ("booking_reference", models.CharField(max_length=20, unique=True)),
                ("event_types", models.JSONField()),
                (
                    "custom_event_type",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("event_details", models.TextField()),
                ("additional_notes", models.TextField(blank=True, null=True)),
                ("total_amount", models.DecimalField(decimal_places=2, max_digits=12)),
                (
                    "booking_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                            ("completed", "Completed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("partial", "Partial"),
                            ("paid", "Paid"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "applicant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="chatbot.applicant",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_bookings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BookingSlot",
            fields=[
                ("slot_id", models.AutoField(primary_key=True, serialize=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("venue_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("isfullday", models.BooleanField(default=False)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slots",
                        to="chatbot.booking",
                    ),
                ),
                (
                    "tier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="chatbot.pricetier",
                    ),
                ),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chatbot.venue"
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_booking_slots",
            },
        ),
        migrations.CreateModel(
            name="BookingService",
            fields=[
                (
                    "booking_service_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("duration_hours", models.DecimalField(decimal_places=2, max_digits=5)),
                ("service_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="booking_services",
                        to="chatbot.booking",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="chatbot.additionalservice",
                    ),
                ),
                (
                    "slot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="chatbot.bookingslot",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_booking_services",
            },
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                ("feedback_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "rating",
                    models.IntegerField(
                        choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
                    ),
                ),
                ("comment", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "booking",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="chatbot.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_feedback",
            },
        ),
        migrations.CreateModel(
            name="NewPayment",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="LKR", max_length=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "payment_type",
                    models.CharField(
                        choices=[("online", "Online"), ("manual", "Manual")],
                        default="online",
                        max_length=20,
                    ),
                ),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="chatbot.booking",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_new_payments",
            },
        ),
        migrations.CreateModel(
            name="ManualPayment",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("cash", "Cash"),
                            ("bank_transfer", "Bank Transfer"),
                            ("bank_slip", "Bank Slip"),
                            ("cheque", "Cheque"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("paid_date", models.DateField()),
                ("notes", models.CharField(default="", max_length=255)),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "payment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="manual_payment",
                        to="chatbot.newpayment",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_manual_payments",
            },
        ),
        migrations.CreateModel(
            name="BankSlip",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("file_path", models.CharField(max_length=500)),
                ("original_filename", models.CharField(max_length=255)),
                ("file_size", models.IntegerField()),
                ("file_type", models.CharField(max_length=50)),
                (
                    "cloudinary_url",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "cloudinary_public_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("stored_locally", models.BooleanField(default=True)),
                ("stored_in_cloud", models.BooleanField(default=False)),
                ("original_file_type", models.CharField(default="", max_length=50)),
                ("converted_file_type", models.CharField(default="", max_length=50)),
                ("conversion_successful", models.BooleanField(default=False)),
                ("verification_notes", models.TextField(blank=True, null=True)),
                ("verified_by", models.CharField(default="", max_length=100)),
                ("verified_at", models.DateTimeField(blank=True, null=True)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "payment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bank_slip",
                        to="chatbot.newpayment",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_bank_slips",
            },
        ),
        migrations.CreateModel(
            name="OnlinePayment",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("payhere_payment_id", models.CharField(default="", max_length=100)),
                ("payhere_order_id", models.CharField(default="", max_length=100)),
                ("payment_token", models.CharField(default="", max_length=255)),
                ("authorization_token", models.CharField(default="", max_length=500)),
                ("md5_signature", models.CharField(default="", max_length=32)),
                (
                    "payment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="online_payment",
                        to="chatbot.newpayment",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_online_payments",
            },
        ),
        migrations.CreateModel(
            name="PaymentAuditLog",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("action", models.CharField(max_length=100)),
                ("performed_by", models.CharField(max_length=100)),
                ("details", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "payment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="chatbot.newpayment",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_payment_audit_logs",
            },
        ),
        migrations.CreateModel(
            name="PaymentInvoice",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("cloudinary_public_id", models.CharField(max_length=255)),
                ("cloudinary_url", models.CharField(max_length=500)),
                ("file_name", models.CharField(max_length=255)),
                (
                    "image_filename",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invoices",
                        to="chatbot.newpayment",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_payment_invoices",
            },
        ),
        migrations.CreateModel(
            name="PaymentNotification",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                            ("REFUNDED", "Refunded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                ("raw_response", models.JSONField(blank=True, null=True)),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                (
                    "payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to="chatbot.newpayment",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_payment_notifications",
            },
        ),
        migrations.CreateModel(
            name="Refund",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("refund_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("refund_reason", models.CharField(default="", max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to="chatbot.newpayment",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_refunds",
            },
        ),
        migrations.CreateModel(
            name="RefundBankDetails",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("account_holder", models.CharField(max_length=100)),
                ("bank_name", models.CharField(max_length=100)),
                ("branch_code", models.CharField(default="", max_length=50)),
                ("account_number", models.CharField(max_length=50)),
                ("swift_code", models.CharField(default="", max_length=50)),
                (
                    "refund",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bank_details",
                        to="chatbot.refund",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_refund_bank_details",
            },
        ),
        migrations.CreateModel(
            name="RefundRequest",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("booking_id", models.CharField(max_length=50, unique=True)),
                ("applicant_name", models.CharField(max_length=100)),
                ("organization_name", models.CharField(default="", max_length=200)),
                ("contact_phone", models.CharField(max_length=20)),
                ("contact_email", models.EmailField(max_length=100)),
                ("event_date", models.DateField()),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("cultural", "Cultural"),
                            ("conference", "Conference"),
                            ("exhibition", "Exhibition"),
                            ("seminar", "Seminar"),
                            ("workshop", "Workshop"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "venue_booked",
                    models.CharField(
                        choices=[
                            ("auditorium", "Auditorium"),
                            ("amphitheatre", "Amphitheatre"),
                            ("conference_hall", "Conference Hall"),
                            ("meeting_room", "Meeting Room"),
                            ("exhibition_hall", "Exhibition Hall"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("venue_other", models.CharField(default="", max_length=100)),
                (
                    "total_amount_paid",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("bank_transfer", "Bank Transfer"),
                            ("card", "Card"),
                            ("payhere", "PayHere"),
                            ("manual", "Manual"),
                        ],
                        max_length=20,
                    ),
                ),
                ("transaction_receipt_number", models.CharField(max_length=100)),
                ("payment_date", models.DateField()),
                ("cancellation_reason", models.TextField()),
                ("cancellation_request_date", models.DateField()),
                (
                    "expected_refund_amount",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12),
                ),
                ("refund_percentage", models.IntegerField(default=0)),
                ("account_holder_name", models.CharField(max_length=100)),
                ("bank_name", models.CharField(max_length=100)),
                ("branch_code", models.CharField(max_length=20)),
                ("account_number", models.CharField(max_length=50)),
                ("swift_code", models.CharField(default="", max_length=20)),
                ("terms_acknowledged", models.BooleanField(default=False)),
                ("digital_signature", models.TextField(blank=True, null=True)),
                ("signature_date", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("processed", "Processed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("admin_notes", models.TextField(blank=True, null=True)),
                ("processed_by", models.CharField(default="", max_length=100)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "chatbot_refund_requests",
                "indexes": [
                    models.Index(
                        fields=["booking_id"], name="chatbot_ref_booking_a43345_idx"
                    ),
                    models.Index(
                        fields=["status"], name="chatbot_ref_status_262c11_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="chatbot_ref_created_88c9a7_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="pricetier",
            name="venue",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="price_tiers",
                to="chatbot.venue",
            ),
        ),
        migrations.CreateModel(
            name="PreArrangement",
            fields=[
                ("arrangement_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "arrangement_type",
                    models.CharField(
                        choices=[
                            ("setup", "Setup"),
                            ("rehearsal", "Rehearsal"),
                            ("breakdown", "Breakdown"),
                        ],
                        max_length=20,
                    ),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pre_arrangements",
                        to="chatbot.booking",
                    ),
                ),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chatbot.venue"
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_pre_arrangements",
            },
        ),
        migrations.CreateModel(
            name="VenueImage",
            fields=[
                ("image_id", models.AutoField(primary_key=True, serialize=False)),
                ("image_url", models.CharField(max_length=500)),
                ("display_order", models.IntegerField(default=0)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "venue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="chatbot.venue",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_venue_images",
                "ordering": ["display_order"],
            },
        ),
        migrations.CreateModel(
            name="LegacyPayment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("order_id", models.CharField(max_length=64, unique=True)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=12)),
                ("currency", models.CharField(default="LKR", max_length=3)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("manual_pending", "Manual Pending"),
                            ("manual_verified", "Manual Verified"),
                            ("manual_rejected", "Manual Rejected"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "gateway",
                    models.CharField(
                        choices=[("payhere", "PayHere"), ("manual", "Manual")],
                        default="payhere",
                        max_length=20,
                    ),
                ),
                ("payment_method", models.CharField(default="card", max_length=20)),
                ("gateway_payment_id", models.CharField(default="", max_length=128)),
                ("raw_notification", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legacy_payments",
                        to="chatbot.booking",
                    ),
                ),
            ],
            options={
                "db_table": "chatbot_legacy_payments",
                "indexes": [
                    models.Index(
                        fields=["booking"], name="chatbot_leg_booking_c3d1ef_idx"
                    ),
                    models.Index(
                        fields=["order_id"], name="chatbot_leg_order_i_ce8aee_idx"
                    ),
                    models.Index(
                        fields=["status"], name="chatbot_leg_status_c734c5_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="chatbot_leg_created_fa70c8_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="newpayment",
            index=models.Index(
                fields=["booking"], name="chatbot_new_booking_0d9345_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="newpayment",
            index=models.Index(fields=["user"], name="chatbot_new_user_id_b6d638_idx"),
        ),
        migrations.AddIndex(
            model_name="newpayment",
            index=models.Index(fields=["status"], name="chatbot_new_status_f19f91_idx"),
        ),
        migrations.AddIndex(
            model_name="newpayment",
            index=models.Index(
                fields=["created_at"], name="chatbot_new_created_e1f961_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="manualpayment",
            index=models.Index(fields=["method"], name="chatbot_man_method_831604_idx"),
        ),
        migrations.AddIndex(
            model_name="manualpayment",
            index=models.Index(
                fields=["paid_date"], name="chatbot_man_paid_da_d67fe6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bankslip",
            index=models.Index(
                fields=["uploaded_at"], name="chatbot_ban_uploade_50e326_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="onlinepayment",
            index=models.Index(
                fields=["payhere_payment_id"], name="chatbot_onl_payhere_24a869_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="onlinepayment",
            index=models.Index(
                fields=["payhere_order_id"], name="chatbot_onl_payhere_60a4c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentauditlog",
            index=models.Index(fields=["action"], name="chatbot_pay_action_24d61b_idx"),
        ),
        migrations.AddIndex(
            model_name="paymentauditlog",
            index=models.Index(
                fields=["created_at"], name="chatbot_pay_created_ede208_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentinvoice",
            index=models.Index(
                fields=["cloudinary_public_id"], name="chatbot_pay_cloudin_75964e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentinvoice",
            index=models.Index(
                fields=["generated_at"], name="chatbot_pay_generat_b7584a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentnotification",
            index=models.Index(fields=["status"], name="chatbot_pay_status_d00b17_idx"),
        ),
        migrations.AddIndex(
            model_name="paymentnotification",
            index=models.Index(
                fields=["received_at"], name="chatbot_pay_receive_ab18d1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="refund",
            index=models.Index(fields=["status"], name="chatbot_ref_status_530ba9_idx"),
        ),
        migrations.AddIndex(
            model_name="refund",
            index=models.Index(
                fields=["requested_at"], name="chatbot_ref_request_7b6fb2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="refundbankdetails",
            index=models.Index(
                fields=["bank_name"], name="chatbot_ref_bank_na_1b8219_idx"
            ),
        ),
    ]
